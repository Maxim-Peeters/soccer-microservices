name: Build and deliver containers

on: push

jobs:
  playerservice:
    runs-on: ubuntu-latest
    name: Build, test, deliver player-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17 (optional, afhankelijk van je project)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./player-service
        run: mvn package -B  # Pas dit aan afhankelijk van je technologie (bijv. .NET of Node.js)

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/player-service:latest ./player-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/player-service:latest

  teamservice:
    runs-on: ubuntu-latest
    name: Build, test, deliver team-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17 (optioneel)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./team-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/team-service:latest ./team-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/team-service:latest

  matchservice:
    runs-on: ubuntu-latest
    name: Build, test, deliver match-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17 (optioneel)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./match-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/match-service:latest ./match-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/match-service:latest

  supporterservice:
    runs-on: ubuntu-latest
    name: Build, test, deliver supporter-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17 (optioneel)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./supporter-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/supporter-service:latest ./supporter-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/supporter-service:latest

  apigateway:
    runs-on: ubuntu-latest
    name: Build, test, deliver api-gateway container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17 (optioneel)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./api-gateway
        run: mvn package -B -DskipTests

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/api-gateway:latest ./api-gateway

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/api-gateway:latest
